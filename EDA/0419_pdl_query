{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"0419_pdl_query","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMzNCRKmoYvibKnJ5cFI6im"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### **- We have list of profiles and associated victim id and victim year. Now we look up those people on PDL and get profile**\n","### **- Then we check to see if their company and working years match with breach incidents**\n","### **- Number of matches is total match each run**"],"metadata":{"id":"bqh9FjxcQprN"}},{"cell_type":"markdown","source":["**Set up**"],"metadata":{"id":"XRKAQb_pX4Cs"}},{"cell_type":"code","source":["!pip install requests fuzzywuzzy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lu1mExDAxGm9","executionInfo":{"status":"ok","timestamp":1650848212248,"user_tz":240,"elapsed":9352,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"156ac9b3-9487-44ec-bc29-7cdd085ae420"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (2.23.0)\n","Collecting fuzzywuzzy\n","  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests) (1.24.3)\n","Installing collected packages: fuzzywuzzy\n","Successfully installed fuzzywuzzy-0.18.0\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive', force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJJrnzOuq9kr","executionInfo":{"status":"ok","timestamp":1650848228322,"user_tz":240,"elapsed":16081,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"d0dac64d-356e-4614-9c21-6b7a3c392007"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["#Path to the main directory\n","folder_path = '/content/gdrive/My Drive/Colab Notebooks/InnSure/pdl_query/'"],"metadata":{"id":"9GQvRD9tq-3b","executionInfo":{"status":"ok","timestamp":1650848228323,"user_tz":240,"elapsed":5,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["**Define libraries and functions needed**"],"metadata":{"id":"ZWrNKg9GYQDC"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"9JG6xR73plw7","executionInfo":{"status":"ok","timestamp":1650848228970,"user_tz":240,"elapsed":651,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"82be3b30-8866-4ca2-e2d6-aad564426d39"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n","  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n"]}],"source":["from fuzzywuzzy import fuzz\n","import pandas as pd\n","import numpy as np\n","import requests\n","import json\n","import time\n","from datetime import datetime\n","import pickle\n","import os\n","from ast import literal_eval"]},{"cell_type":"code","source":["## loads a pickle/python object\n","## prints current time\n","def now(phrase):\n","    print(f\"[{datetime.now()}]: {phrase}\")\n","    \n","now(\"Success!\")\n","def load(filename):\n","    now(\"starting\")\n","    if (os.path.exists(filename)):\n","        with open(filename, 'rb') as f:\n","            data = pickle.load(f)\n","        now(\"ending\")\n","        return data\n","    else:\n","        raise FileNotFoundError(f\"could not find {filename}\")\n","\n","\n","## saves as pickle object\n","def save(filename, obj):\n","    now(\"Starting\")\n","    with open(filename, 'wb') as f:\n","        pickle.dump(obj, f)\n","        print(f\"Saved obj Object to {filename}!\")\n","    now(\"Ending\")\n","    return ''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yDolLRyysTLZ","executionInfo":{"status":"ok","timestamp":1650848229179,"user_tz":240,"elapsed":217,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"b6d7ae64-95b8-487e-90c5-2bfa67759127"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[2022-04-25 00:57:09.445916]: Success!\n"]}]},{"cell_type":"markdown","source":["**Load PDL profile files and breach_link file**"],"metadata":{"id":"R81g_gUxX9rP"}},{"cell_type":"code","source":["#Paths to dataset 1\n","master_path = folder_path + \"profile_breach_linked.csv\"\n","\n","first_path = folder_path + \"success_profiles_2022-04-16_23_42_30.pickle\"\n","second_path = folder_path + \"success_profiles_2022-04-17_0_3_58.pickle\"\n","third_path = folder_path + \"success_profiles_2022-04-17_0_37_7.pickle\"\n","fourth_path = folder_path + \"success_profiles_2022-04-17_17_21_35.pickle\"\n","fifth_path = folder_path + \"success_profiles_2022-04-17_17_41_42.pickle\"\n","sixth_path = folder_path + \"success_profiles_2022-04-17_17_59_52.pickle\"\n","seventh_path = folder_path + \"success_profiles_2022-04-17_18_44_11.pickle\""],"metadata":{"id":"8THSHfOUrAEk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#load pickle files\n","first = load(first_path)\n","second = load(second_path)\n","third = load(third_path)\n","fourth = load(fourth_path)\n","fifth = load(fifth_path)\n","sixth = load(sixth_path)\n","seventh = load(seventh_path)"],"metadata":{"id":"CfX6jef_sbyc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Clean breach data**"],"metadata":{"id":"AN_MaXigYaZd"}},{"cell_type":"code","source":["#clean breach data\n","breach = pd.read_csv(master_path,converters={\"timeline.incident.year\": literal_eval})\n","breach = breach.drop(['Unnamed: 0'], axis=1)\n","breach.info()\n","\n","type(breach['timeline.incident.year'][1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZBqwGPMqsAHu","executionInfo":{"status":"ok","timestamp":1650386117465,"user_tz":240,"elapsed":169,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"83e7cc5b-790f-4b28-eb1d-90efb4577134"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6296 entries, 0 to 6295\n","Data columns (total 4 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   linkedinProfile         6296 non-null   object \n"," 1   victim.victim_id        6296 non-null   object \n"," 2   timeline.incident.year  6296 non-null   object \n"," 3   count_years             6296 non-null   float64\n","dtypes: float64(1), object(3)\n","memory usage: 196.9+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["**Get number of matches**"],"metadata":{"id":"SGMGM-2kYe1Z"}},{"cell_type":"code","source":["#files=[first[:20]]\n","\n","files =[first,second,third,fourth,fifth,sixth,seventh]\n","matchProfile = [] #list of matched profiles\n","matchProfileUrl = [] #list of matched profiles\n","matchExp_ct = [0 for x in range(len(files))] #number of matched profiles in each file\n","nonmatchYr_ct = [0 for x in range(len(files))] #number of (match company but) non-match years in each file\n","nonmatchId_ct = [0 for x in range(len(files))] #number of non-match company in each file\n","notinPDL = [] #number of profiles that PDL do not have enough data on \n","notinBreachLink = [] #number of profiles that are not in the profile_breach_linked\n","\n","for x in range(len(files)):\n","  file = files[x]\n","  for i in range(len(file)):\n","    if file[i]['search_input_url'] not in breach['linkedinProfile'].tolist():\n","      notinBreachLink.append(file[i]['search_input_url'])\n","    else:\n","      ind = breach.index[breach['linkedinProfile']==file[i]['search_input_url']].tolist()\n","      ind = ind[0]\n","      file[i]['search_breach_year'] = breach['timeline.incident.year'][ind]\n","\n","      profile = file[i]\n","      profileData = profile['data']\n","      breachId = profile['search_input_company']\n","      breachYear = profile['search_breach_year']\n","\n","      if profileData['experience'] == []:\n","        notinPDL.append(profile['search_input_url'])\n","        continue\n","      else:\n","        countMatch = 0\n","        for experience in profileData['experience']:\n","          try:\n","            companyName = experience['company']['name']\n","            startDate = experience['start_date']\n","            endDate = experience['end_date']\n","          except:\n","            notinPDL.append(profile['search_input_url'])\n","            continue\n","          if startDate != None and endDate == None:\n","            endDate = '2022'\n","          elif startDate == None and endDate != None:\n","            startDate = endDate\n","          if startDate != None and endDate != None:\n","            startDate = startDate[:4]\n","            endDate = endDate[:4]\n","          partial_ratio = fuzz.partial_ratio(companyName,breachId)\n","          token_sort_ratio = fuzz.token_sort_ratio(companyName,breachId)\n","          token_set_ratio = fuzz.token_set_ratio(companyName,breachId)\n","  \n","          #  print(\"token_set_ratio: \",companyName,\"/\",breachId,token_set_ratio)\n","\n","          if token_set_ratio == 100 or partial_ratio == 100:\n","            if startDate == None and endDate == None:\n","              notinPDL.append(profile['search_input_url'])\n","            else:\n","              for year in breachYear:\n","                if int(startDate) <= int(year) and int(endDate) >= int(year):\n","                  matchExp_ct[x] +=1\n","                  countMatch +=1\n","                  ############\n","                  experience['breachJob'] = 1\n","                  #matchProfileUrl.append(profile['search_input_url'])\n","                  #matchProfile.append(profile)\n","                  ##########\n","\n","                else:\n","                  nonmatchYr_ct[x] +=1\n","                  #############\n","                  experience['breachJob'] = 0\n","          else:\n","            nonmatchId_ct[x] +=1\n","            ##############\n","            experience['breachJob'] = 0\n","        if countMatch > 0:\n","          matchProfileUrl.append(profile['search_input_url'])\n","          matchProfile.append(profile)\n","    \n","  #print(\"total number of total unique matching profiles after file\",x+1, len(matchProfileUrl))\n","  #print(\"number of matching experiences in file\",x+1,\":\", matchExp_ct[x])\n","print(\"total number of matching profile urls\", len(matchProfileUrl))\n","print(\"total number of matching profiles \", len(matchProfile))\n","print(\"total number of profiles that PDL do not have enough data on\", len(set(notinPDL)))\n","print(\"total number of profiles that are in master_link but not in breach_link\", len(set(notinBreachLink)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GEgN0XDKsT7Q","executionInfo":{"status":"ok","timestamp":1650386149730,"user_tz":240,"elapsed":30539,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"972d1f8e-66e3-4175-8424-b53af56e263e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total number of matching profile urls 1106\n","total number of matching profiles  1106\n","total number of profiles that PDL do not have enough data on 580\n","total number of profiles that are in master_link but not in breach_link 48\n"]}]},{"cell_type":"code","source":["matchProfile"],"metadata":{"id":"Zxyi4FfFptvv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["with open('matchProfileUrl_0419.pickle', 'wb') as handle:\n","    pickle.dump(matchProfileUrl, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","\n","with open('matchProfileUrl_0419.pickle', 'rb') as handle:\n","    open_matchProfileUrl = pickle.load(handle)"],"metadata":{"id":"DOw0DTcl_xa1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["with open('matchProfile_0419.pickle', 'wb') as handle:\n","    pickle.dump(matchProfile, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","\n","with open('matchProfile_0419.pickle', 'rb') as handle:\n","    open_matchProfile = pickle.load(handle)"],"metadata":{"id":"dveWvIeBLUlI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = load(folder_path+'matchProfile_0418.pickle')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I92goQZVL0ys","executionInfo":{"status":"ok","timestamp":1650344305559,"user_tz":240,"elapsed":915,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"a7cac3a6-20fc-4bf2-a46e-9b2e78faa669"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2022-04-19 04:58:25.030775]: starting\n","[2022-04-19 04:58:25.942720]: ending\n"]}]},{"cell_type":"code","source":["import random\n","test = random.sample(matchProfile,10)\n","test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xFEOecv495AZ","executionInfo":{"status":"ok","timestamp":1650247811928,"user_tz":240,"elapsed":164,"user":{"displayName":"nudata lab","userId":"06162968579642919692"}},"outputId":"64bec15a-4758-4e7e-c191-4f5ea9c55e92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['https://www.linkedin.com/in/mark-gandy-89440b2',\n"," 'https://www.linkedin.com/in/lennylevy',\n"," 'https://www.linkedin.com/in/ken-downs-a3722042',\n"," 'https://www.linkedin.com/in/allisonlmiller',\n"," 'https://www.linkedin.com/in/chris-kubic-bb984a17b',\n"," 'https://www.linkedin.com/in/jackipemrick',\n"," 'https://www.linkedin.com/in/tom-schoenherr-06858733',\n"," 'https://www.linkedin.com/in/bdmclaughlin',\n"," 'https://www.linkedin.com/in/steve-sakamoto-29058220/',\n"," 'https://www.linkedin.com/in/brad-medd-3172b710']"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":[""],"metadata":{"id":"h-hHdSM5KW_N"},"execution_count":null,"outputs":[]}]}